import kotlin.random.Random
import kotlin.system.exitProcess

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
data class SimulationConfig(
    val islandWidth: Int,
    val islandHeight: Int,
    val initialHerbivores: Int,
    val initialPredators: Int,
    val plantGrowthProbability: Int,
    val simulationSpeed: Long,
    val stopCondition: () -> Boolean
)

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Animal
abstract class Animal(val name: String, var x: Int, var y: Int, val symbol: String) {
    abstract fun move()
    abstract fun reproduce(): Animal?
    abstract fun die(): Boolean

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Å—Ç—Ä–æ–≤–∞
    fun isWithinBounds(island: Array<Array<Location>>): Boolean {
        return x in island.indices && y in island[0].indices
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
class Herbivore(name: String, x: Int, y: Int, symbol: String) : Animal(name, x, y, symbol) {
    override fun move() {
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        val directions = listOf(-1 to 0, 1 to 0, 0 to -1, 0 to 1)
        val (dx, dy) = directions.random()
        x += dx
        y += dy
    }

    override fun reproduce(): Animal? {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è 50%
        return if (Random.nextInt(100) < 50) {
            Herbivore(name, x, y, symbol) // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ
        } else {
            null
        }
    }

    override fun die(): Boolean {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–º–µ—Ä—Ç–∏ 10%
        return Random.nextInt(100) < 10
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ö–∏—â–Ω–∏–∫–æ–≤
class Predator(name: String, x: Int, y: Int, symbol: String) : Animal(name, x, y, symbol) {
    override fun move() {
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        val directions = listOf(-1 to 0, 1 to 0, 0 to -1, 0 to 1)
        val (dx, dy) = directions.random()
        x += dx
        y += dy
    }

    override fun reproduce(): Animal? {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è 30%
        return if (Random.nextInt(100) < 30) {
            Predator(name, x, y, symbol) // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–∏—â–Ω–∏–∫–∞
        } else {
            null
        }
    }

    override fun die(): Boolean {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–º–µ—Ä—Ç–∏ 20%
        return Random.nextInt(100) < 20
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π
class Plant(val x: Int, val y: Int, val symbol: String)

// –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ (–∫–ª–µ—Ç–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞)
class Location {
    val plants = mutableListOf<Plant>()
    val animals = mutableListOf<Animal>()
}

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞
class Island(val width: Int, val height: Int) {
    val grid = Array(width) { Array(height) { Location() } }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç—Ä–æ–≤–∞
    fun initialize(config: SimulationConfig) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
        repeat(config.initialHerbivores) {
            addAnimal(Herbivore("–û–ª–µ–Ω—å", Random.nextInt(width), Random.nextInt(height), "ü¶å"))
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∏—â–Ω–∏–∫–æ–≤
        repeat(config.initialPredators) {
            addAnimal(Predator("–í–æ–ª–∫", Random.nextInt(width), Random.nextInt(height), "üê∫"))
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
        for (i in 0 until width) {
            for (j in 0 until height) {
                if (Random.nextInt(100) < config.plantGrowthProbability) {
                    grid[i][j].plants.add(Plant(i, j, "üåø"))
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –Ω–∞ –æ—Å—Ç—Ä–æ–≤
    fun addAnimal(animal: Animal) {
        if (animal.isWithinBounds(grid)) {
            grid[animal.x][animal.y].animals.add(animal)
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞
    fun update() {
        val newAnimals = mutableListOf<Animal>()

        for (i in 0 until width) {
            for (j in 0 until height) {
                val location = grid[i][j]
                val animalsToRemove = mutableListOf<Animal>()

                for (animal in location.animals) {
                    animal.move()
                    if (!animal.isWithinBounds(grid)) {
                        animalsToRemove.add(animal)
                    } else {
                        val offspring = animal.reproduce()
                        if (offspring != null) {
                            newAnimals.add(offspring)
                        }
                        if (animal.die()) {
                            animalsToRemove.add(animal)
                        }
                    }
                }

                location.animals.removeAll(animalsToRemove)
            }
        }

        newAnimals.forEach { addAnimal(it) }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    fun getGridState(): Array<Array<String>> {
        return Array(width) { i ->
            Array(height) { j ->
                when {
                    grid[i][j].animals.any { it is Predator } -> "üê∫" // –•–∏—â–Ω–∏–∫
                    grid[i][j].animals.any { it is Herbivore } -> "ü¶å" // –¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ
                    grid[i][j].plants.isNotEmpty() -> "üåø" // –†–∞—Å—Ç–µ–Ω–∏–µ
                    else -> "‚¨ú" // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                }
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
fun printIsland(grid: Array<Array<String>>) {
    for (i in grid.indices) {
        for (j in grid[i].indices) {
            print(grid[i][j])
        }
        println()
    }
    println()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
fun readSimulationConfig(): SimulationConfig {
    println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    print("–®–∏—Ä–∏–Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞: ")
    val width = readLine()?.toIntOrNull() ?: 20
    print("–í—ã—Å–æ—Ç–∞ –æ—Å—Ç—Ä–æ–≤–∞: ")
    val height = readLine()?.toIntOrNull() ?: 20
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: ")
    val herbivores = readLine()?.toIntOrNull() ?: 10
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—â–Ω–∏–∫–æ–≤: ")
    val predators = readLine()?.toIntOrNull() ?: 5
    print("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π (%): ")
    val plantGrowth = readLine()?.toIntOrNull() ?: 20
    print("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–∫—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥): ")
    val speed = readLine()?.toLongOrNull() ?: 1L

    return SimulationConfig(
        islandWidth = width,
        islandHeight = height,
        initialHerbivores = herbivores,
        initialPredators = predators,
        plantGrowthProbability = plantGrowth,
        simulationSpeed = speed * 1000, // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        stopCondition = {
            false // –£—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        }
    )
}


// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
fun main() {
    val config = readSimulationConfig()
    val island = Island(config.islandWidth, config.islandHeight)
    island.initialize(config)

    // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    while (true) {
        island.update()
        printIsland(island.getGridState())
        Thread.sleep(config.simulationSpeed)

        // –£—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–º–µ—Ä–ª–∏)
        if (island.grid.all { row -> row.all { it.animals.isEmpty() } }) {
            println("–í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–º–µ—Ä–ª–∏. –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            exitProcess(0)
        }
    }
}