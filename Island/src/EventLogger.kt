package com.javarush.island.entities

object EventLogger {
    private val animalEmojis = mapOf(
        "Wolf" to "üê∫",
        "Snake" to "üêç",
        "Fox" to "ü¶ä",
        "Bear" to "üêª",
        "Eagle" to "ü¶Ö",
        "Horse" to "üêé",
        "Deer" to "ü¶å",
        "Rabbit" to "üêá",
        "Mouse" to "üêÅ",
        "Goat" to "üêê",
        "Sheep" to "üêë",
        "Boar" to "üêó",
        "Buffalo" to "üêÉ",
        "Duck" to "ü¶Ü",
        "Caterpillar" to "üêõ",
        "Plant" to "üåø"
    )

    private fun getEmoji(name: String?): String {
        return animalEmojis[name] ?: "‚ùì"
    }

    @Synchronized
    fun logEating(predator: Animal, prey: Any) {
        val predatorName = predator::class.simpleName
        val predatorEmoji = getEmoji(predatorName)
        
        val (preyName, preyEmoji) = when(prey) {
            is Animal -> prey::class.simpleName to getEmoji(prey::class.simpleName)
            is Plant -> "—Ä–∞—Å—Ç–µ–Ω–∏–µ" to "üåø"
            else -> "Unknown" to "‚ùì"
        }
        
        println("$predatorEmoji $predatorName —Å—ä–µ–ª $preyEmoji $preyName")
    }

    @Synchronized
    fun logBirth(parent: Animal, child: Animal) {
        val animalType = parent::class.simpleName
        val emoji = getEmoji(animalType)
        println("–†–æ–¥–∏–ª—Å—è –Ω–æ–≤—ã–π $animalType! $emoji")
    }

    @Synchronized
    fun logDeath(animal: Animal, cause: String = "–≥–æ–ª–æ–¥") {
        val animalType = animal::class.simpleName
        val emoji = getEmoji(animalType)
        println("$emoji $animalType –ø–æ–≥–∏–± –æ—Ç: $cause")
    }

    @Synchronized
    fun logMovement(animal: Animal, fromX: Int, fromY: Int, toX: Int, toY: Int) {
        val animalType = animal::class.simpleName
        val emoji = getEmoji(animalType)
        println("$emoji $animalType –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è —Å ($fromX, $fromY) –Ω–∞ ($toX, $toY)")
    }
} 